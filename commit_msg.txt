chore(step-3): FastAPI backend skeleton with health/probe stubs and UI ping

Backend Components:
- Created FastAPI server.py with CORS middleware and /api prefix
- Implemented health.py endpoint returning status ok + version + timestamp
- Implemented probe.py endpoint returning placeholder hardware info (mode: unknown)
- Implemented jobs.py endpoints (POST/GET/DELETE) with in-memory stub storage
- Created Pydantic schemas.py (HealthResponse, ProbeResponse, JobCreate, JobResponse)

UI Integration:
- Created backend_status.py helper to ping /api/health and /api/probe
- Updated top_bar.py to show API connection status (OK/OFFLINE) in green/red
- Added hardware pill color coding (green/yellow/red) based on probe mode
- Backend check runs in QThread to avoid blocking UI

Configuration:
- Updated config.py with api_base_url (http://127.0.0.1:8971)
- Changed backend_port from 8765 to 8971
- Updated logging.py with get_logger() factory function

Tests:
- Created integration tests (test_backend_health.py) with FastAPI TestClient
- Created unit tests (test_probe_schema.py) for Pydantic model validation
- All 23 tests passing (1 skipped)

Documentation:
- Created docs/architecture/components.md with system architecture
- Updated docs/ops/install_windows.md with backend run instructions
- Updated README.md with dev run targets (backend + UI in two terminals)

Quality:
- All pre-commit hooks passing
- Fixed ruff errors (unused args, type annotations)
